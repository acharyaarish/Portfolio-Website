{"version":3,"file":"static/js/585.6e9cbdcb.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/toast/src/use-toast.tsx","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/textarea/src/textarea.tsx","../node_modules/utilities/object-utils/src/omit.ts","components/Contact.js","../node_modules/@chakra-ui/layout/src/container.tsx"],"sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  Input,\n  Textarea,\n  Button,\n  Link,\n  Flex,\n  useToast,\n  VStack,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { FaGithub } from 'react-icons/fa';\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({ name: '', email: '', message: '' });\n  const toast = useToast();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const formUrl = 'https://formspree.io/f/mvgpzrlw';\n    fetch(formUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formData),\n    })\n      .then((response) => {\n        if (response.ok) {\n          toast({\n            title: 'Message sent.',\n            description: 'Your message was sent successfully!',\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          });\n          setFormData({ name: '', email: '', message: '' });\n        } else {\n          toast({\n            title: 'Error.',\n            description: 'Failed to send message.',\n            status: 'error',\n            duration: 5000,\n            isClosable: true,\n          });\n        }\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n        toast({\n          title: 'Error.',\n          description: 'Failed to send message.',\n          status: 'error',\n          duration: 5000,\n          isClosable: true,\n        });\n      });\n  };\n\n  // Define color scheme based on the provided palettes\n  const bgColor = useColorModeValue('#D1D5DB', '#2A2A2A'); // Slightly darker background\n  const textColor = useColorModeValue('#333', '#E2E8F0');\n  const borderColor = useColorModeValue('#cccccc', '#555555');\n  const inputBg = useColorModeValue('#fff', '#2D3748');\n  const inputFocusBorder = useColorModeValue('#3182ce', '#90CDF4');\n\n  return (\n    <Box\n      as=\"section\"\n      bg={bgColor}\n      color={textColor}\n      py={20}\n      id=\"contact\"\n      borderRadius=\"lg\"\n      boxShadow=\"lg\"\n    >\n      <Container maxW=\"container.md\" textAlign=\"center\">\n        <Heading as=\"h2\" size=\"xl\" mb={10} color={textColor} fontWeight=\"bold\">\n          Get in Touch 📬\n        </Heading>\n        <form onSubmit={handleSubmit}>\n          <VStack spacing={6} align=\"stretch\">\n            <Input\n              placeholder=\"Your Name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              borderColor={borderColor}\n              bg={inputBg}\n              _hover={{ borderColor: inputFocusBorder }}\n              _focus={{ borderColor: inputFocusBorder, boxShadow: '0 0 0 1px #3182ce' }}\n              isRequired\n            />\n            <Input\n              placeholder=\"Your Email\"\n              type=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              borderColor={borderColor}\n              bg={inputBg}\n              _hover={{ borderColor: inputFocusBorder }}\n              _focus={{ borderColor: inputFocusBorder, boxShadow: '0 0 0 1px #3182ce' }}\n              isRequired\n            />\n            <Textarea\n              placeholder=\"Your Message\"\n              name=\"message\"\n              value={formData.message}\n              onChange={handleChange}\n              borderColor={borderColor}\n              bg={inputBg}\n              _hover={{ borderColor: inputFocusBorder }}\n              _focus={{ borderColor: inputFocusBorder, boxShadow: '0 0 0 1px #3182ce' }}\n              isRequired\n            />\n          </VStack>\n          <Button\n            type=\"submit\"\n            colorScheme=\"teal\"\n            bg=\"#479761\"\n            _hover={{ bg: '#367d5b', transform: 'scale(1.05)' }}\n            size=\"lg\"\n            mt={8}\n            isFullWidth\n            transition=\"all 0.3s\"\n          >\n            Send Message 💬\n          </Button>\n        </form>\n        <Flex justify=\"center\" mt={8}>\n          <Link href=\"https://github.com/acharyaarish\" isExternal>\n            <Button\n              leftIcon={<FaGithub />}\n              colorScheme=\"gray\"\n              variant=\"ghost\"\n              fontSize=\"2xl\"\n              _hover={{ color: 'teal.500' }}\n            >\n              GitHub\n            </Button>\n          </Link>\n        </Flex>\n        <Box mt={8} fontSize=\"sm\" color={textColor}>\n          &copy; 2023 Arish Acharya - All rights reserved.\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Contact;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n"],"names":["useToast","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction","Input","forwardRef","props","ref","htmlSize","rest","styles","useMultiStyleConfig","ownProps","omitThemingProps","input","useFormControl","_className","cx","className","jsx","chakra","size","__css","field","displayName","id","omitted","Textarea","useStyleConfig","rows","textareaProps","textareaStyles","object","keysToOmit","arguments","length","undefined","clone","Object","assign","key","omit","textarea","Contact","formData","setFormData","useState","name","email","message","toast","handleChange","e","value","target","bgColor","useColorModeValue","textColor","borderColor","inputBg","inputFocusBorder","_jsx","Box","as","bg","color","py","borderRadius","boxShadow","children","_jsxs","Container","maxW","textAlign","Heading","mb","fontWeight","onSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","ok","title","description","status","duration","isClosable","catch","error","console","VStack","spacing","align","placeholder","onChange","_hover","_focus","isRequired","type","Button","colorScheme","transform","mt","isFullWidth","transition","Flex","justify","Link","href","isExternal","leftIcon","FaGithub","variant","fontSize","centerContent","div","display","flexDirection","alignItems"],"sourceRoot":""}