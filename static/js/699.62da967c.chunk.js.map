{"version":3,"file":"static/js/699.62da967c.chunk.js","mappings":"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","sources":["components/Skills.js","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, SimpleGrid, Text, VStack, Icon, useColorModeValue, Heading } from '@chakra-ui/react';\nimport {\n  FaPython, FaReact, FaNodeJs, FaPalette, FaDatabase, FaNetworkWired,\n  FaLaptopCode, FaTable, FaChartLine, FaGitAlt, FaAws, FaCloud, FaFileExcel, FaRProject, FaJs\n} from 'react-icons/fa';\n\nconst skills = [\n  { name: 'Python', icon: FaPython },\n  { name: 'R', icon: FaRProject },\n  { name: 'SQL', icon: FaDatabase },\n  { name: 'JavaScript', icon: FaJs },\n  { name: 'React', icon: FaReact },\n  { name: 'Node.js', icon: FaNodeJs },\n  { name: 'Chakra UI', icon: FaPalette },\n  { name: 'Git', icon: FaGitAlt },\n  { name: 'AWS', icon: FaAws },\n  { name: 'Azure', icon: FaCloud },\n  { name: 'Tableau', icon: FaTable },\n  { name: 'PowerBI', icon: FaChartLine },\n  { name: 'Excel', icon: FaFileExcel },\n  { name: 'TCP/IP', icon: FaNetworkWired },\n  { name: 'CISCO', icon: FaLaptopCode },\n];\n\nconst Skills = () => {\n  const bg = useColorModeValue('#E2E8F0', '#2D3748'); // Distinct background color\n  const cardBg = useColorModeValue('white', '#1A202C');\n  const textColor = useColorModeValue('#19181A', 'white');\n  const borderColor = useColorModeValue('teal.300', 'teal.200');\n\n  return (\n    <Box id=\"skills\" bg={bg} py={16} px={8} borderRadius=\"lg\" boxShadow=\"lg\">\n      <VStack spacing={3} mb={8}>\n        <Heading fontSize=\"2xl\" fontWeight=\"bold\" color={textColor}>Skills</Heading>\n        <Text color={textColor} textAlign=\"center\" fontSize=\"lg\">\n          Technologies and tools I am proficient in:\n        </Text>\n      </VStack>\n      <SimpleGrid columns={[2, 3, 4, 5]} spacing={8} pb={8}>\n        {skills.map((skill, index) => (\n          <Box\n            key={index}\n            bg={cardBg}\n            p={6}\n            rounded=\"lg\"\n            shadow=\"md\"\n            transition=\"transform 0.2s, box-shadow 0.2s\"\n            _hover={{ transform: 'scale(1.05)', boxShadow: '0 0 10px teal', borderColor: borderColor }}\n            border=\"1px solid transparent\"\n            textAlign=\"center\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n          >\n            <Icon as={skill.icon} boxSize=\"40px\" color=\"teal.500\" mb={3} />\n            <Text fontWeight=\"medium\" color={textColor} fontSize=\"md\">{skill.name}</Text>\n          </Box>\n        ))}\n      </SimpleGrid>\n    </Box>\n  );\n};\n\nexport default Skills;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"names":["skills","name","icon","FaPython","FaRProject","FaDatabase","FaJs","FaReact","FaNodeJs","FaPalette","FaGitAlt","FaAws","FaCloud","FaTable","FaChartLine","FaFileExcel","FaNetworkWired","FaLaptopCode","Skills","bg","useColorModeValue","cardBg","textColor","borderColor","_jsxs","Box","id","py","px","borderRadius","boxShadow","children","VStack","spacing","mb","_jsx","Heading","fontSize","fontWeight","color","Text","textAlign","SimpleGrid","columns","pb","map","skill","index","p","rounded","shadow","transition","_hover","transform","border","display","flexDirection","alignItems","Icon","as","boxSize","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","jsx","chakra","div","__css","displayName","spacingX","spacingY","minChildWidth","theme","useTheme","width","mapResponsive","value","_value","getToken","n","concat","widthToColumns","count"],"sourceRoot":""}