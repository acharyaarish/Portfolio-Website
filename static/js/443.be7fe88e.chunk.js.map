{"version":3,"file":"static/js/443.be7fe88e.chunk.js","mappings":"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","sources":["components/Projects.js","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  SimpleGrid,\n  Text,\n  Link,\n  Image,\n  VStack,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\n\nconst projects = [\n  {\n    name: 'Python Dashboard',\n    link: 'https://github.com/acharyaarish/Python_Dashboard',\n    description: 'Wildlife Incidents Dashboard using Python (Dash and Plotly), hosted on AWS EC2. Analysis of incident hotspots, peak times, and seasons.',\n    tags: ['Python', 'Dashboard', 'AWS'],\n  },\n  {\n    name: 'Dog Breed Detector',\n    link: 'https://github.com/acharyaarish/dog_breed_detector',\n    description: 'Dog Breed Detector Game using Node.js for backend and React for frontend via DogCeo API.',\n    tags: ['Node.js', 'React', 'API'],\n  },\n  {\n    name: 'IoT Project',\n    link: 'https://github.com/acharyaarish/Excel_Dashboard',\n    description: 'IoT system that captures nearby human images and alerts users through text and email.',\n    tags: ['IoT', 'Security', 'Automation'],\n  },\n  {\n    name: 'Wildlife Incidents Report',\n    link: 'https://github.com/acharyaarish/Python_Dashboard/blob/main/Wildlife%20Incidents%20ACT.pdf',\n    description: 'Analysis of Wildlife Incidents (2016-24) from ACT. The report covers incident hotspots, peak times, and species involved.',\n    tags: ['Report', 'Analysis', 'Wildlife'],\n  },\n  {\n    name: 'Excel Dashboard',\n    link: 'https://github.com/acharyaarish/Excel_Dashboard',\n    description: 'Excel Dashboard for Supermarket using PivotTable showcasing an in-depth analysis of sales.',\n    tags: ['Excel', 'Dashboard', 'Sales'],\n  },\n  {\n    name: 'Professor',\n    link: 'https://paldip.com/',\n    description: 'Assisted my University Professor with testing, debugging and adding new features for his Edtech Platform.',\n    tags: ['Edtech', 'Testing', 'Debugging'],\n  },\n];\n\nconst Projects = () => {\n  // Define color scheme based on the provided palettes\n  const bgColor = useColorModeValue('#B4D8E7', '#1A202C'); // Lighter container background color\n  const textColor = useColorModeValue('#2D3748', '#E2E8F0');\n  const linkColor = useColorModeValue('#00796B', '#90CDF4');\n  const cardBgColor = useColorModeValue('#F9F9F9', '#334552'); // Light card background color\n  const cardHoverBgColor = useColorModeValue('#E8F0FA', '#3B3F44'); // Slightly lighter hover background color\n  const tagBgColor = useColorModeValue('#00796B', '#577b91');\n\n  return (\n    <Box as=\"section\" bg={bgColor} color={textColor} id=\"projects\">\n      <Container maxW=\"container.xl\" textAlign=\"center\" py={20}>\n        <Heading as=\"h2\" size=\"xl\" mb={8} color={linkColor}>\n          Projects ðŸš€\n        </Heading>\n        <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={10}>\n          {projects.map((project, index) => (\n            <motion.div\n              key={index}\n              whileHover={{ scale: 1.05 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Box\n                bg={cardBgColor}\n                borderRadius=\"md\"\n                boxShadow=\"md\"\n                p={5}\n                height=\"100%\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"space-between\"\n                _hover={{ bg: cardHoverBgColor }}\n                transition=\"0.3s\"\n              >\n                <VStack spacing={4} align=\"start\">\n                  <Image\n                    src={`${process.env.PUBLIC_URL}/img/${project.name.toLowerCase().replace(/\\s+/g, '-')}.png`}\n                    alt={project.name}\n                    borderRadius=\"md\"\n                    objectFit=\"cover\"\n                    height=\"150px\"\n                    width=\"100%\"\n                  />\n                  <Box>\n                    <Link\n                      href={project.link}\n                      isExternal\n                      fontSize=\"lg\"\n                      fontWeight=\"bold\"\n                      color={linkColor}\n                      _hover={{ textDecoration: 'underline' }}\n                    >\n                      {project.name}\n                    </Link>\n                    <Text color={textColor}>{project.description}</Text>\n                  </Box>\n                  <Box mt=\"auto\" display=\"flex\" justifyContent=\"center\" width=\"100%\">\n                    {project.tags.map((tag, i) => (\n                      <Text\n                        as=\"span\"\n                        key={i}\n                        bg={tagBgColor}\n                        color=\"white\"\n                        p={1}\n                        borderRadius=\"md\"\n                        mr={2}\n                        fontSize=\"sm\"\n                      >\n                        {tag}\n                      </Text>\n                    ))}\n                  </Box>\n                </VStack>\n              </Box>\n            </motion.div>\n          ))}\n        </SimpleGrid>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Projects;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n"],"names":["projects","name","link","description","tags","Projects","bgColor","useColorModeValue","textColor","linkColor","cardBgColor","cardHoverBgColor","tagBgColor","_jsx","Box","as","bg","color","id","children","_jsxs","Container","maxW","textAlign","py","Heading","size","mb","SimpleGrid","columns","base","md","lg","spacing","map","project","index","motion","div","whileHover","scale","transition","duration","borderRadius","boxShadow","p","height","display","flexDirection","justifyContent","_hover","VStack","align","Image","src","concat","process","toLowerCase","replace","alt","objectFit","width","Link","href","isExternal","fontSize","fontWeight","textDecoration","Text","mt","tag","i","mr","forwardRef","props","ref","className","centerContent","rest","omitThemingProps","styles","useStyleConfig","jsx","chakra","cx","__css","alignItems","displayName","Grid","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","spacingX","spacingY","minChildWidth","theme","useTheme","mapResponsive","value","_value","getToken","n","widthToColumns","count","Stack","direction"],"sourceRoot":""}